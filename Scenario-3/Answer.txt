1) The middle layer should be implemented as Microservices using Azure AKS
A. To deploy Microservice we need to create the image of application in 1 way we can push image on to docker hub using “docker push docker.io/account/image.RELEASE”  
command, Once pushed to docker create deployment.yaml file containing required instruction and run command
Kubectl apply -f deployment.yaml, this will create microservices in AKS.
    
2) The middle layer API should be deployed as containerized application images
A. In this case I am assuming we already have ACR in placed in azure.
I)	az acr import -n <name of your ACR>  --source docker.io/library/ mycustomimage:0.1 –image mycustomimage:0.1
II)	post image import we can see image name mycustomimage and version 0.1 is shown in repository section of ACR.
III)	Run “az aks create --location $location --subscription $subscription --resource-group $resource-group --name $aksname --service-principal $spnid --client-
        secret $spnsecret --node-count 2 --node-vm-size Standard_B2s --attach-acr <ACRName>” to create aks cluster and attach acr at same time.
IV)	If you already have Kubernetes provisioned then, we can create yaml file sample in repo and run “kubectl apply -f Deploy.yaml” this will create a deployment
        using acr image. (sample file uploaded in repo)
              
3)  The container images will use Azure Container Repository (ACR) as the private image repository
A. Shared yaml file for running deployamnet using acr image. Assuming image already been imported in ACR using az acr import command.
Note: please make sure SPN used to run AKS have necessary permission in ACR to use image available in ACR

4)	The CI/CD pipelines for microservices should be implemented using Azure DevOps services.
To Deploy microservices using CI/CD we can use helm package manager for AKS.
This contain  3 main file named charts.yaml(name, api version, description, version), values.yaml (containe key value format variable) and template file(contain deplymante instruction)
1)	Create a build pipeline that will run the build and download necessary binary and chart.yaml,values.yaml in default drop location.
2)	Run build pipeline.
3)	Create a release pipeline, add below tasks.
Task1: help tool installer(this will install helm(specify version) and kubectl(specify version)
Task2: package and deploy help charts, select connection type Kubernetes service connection, create service connection with Kubernete using kubeconfig file, slect command type init and left all option default. 
Note(Task 2 is manly used for upgrade and init helm)
Task3: package and deploy help charts (this task is used for actual microserver deployment), paramateres of the task given below in key value format.
Connection Type: Kubernetes Service Connection
Kubernetes Service Connection: connection name
Command: upgrade
Chart Type: File Path
Chart Path: you drop location/Chart folder location
Value File: Chart Value file name.
4)	Create Release
	Above 4 steps can be added for microservice deployment.

5)	The Azure DevOps should be able to access ACR and download the container images for deployment
We can get access of ACR for deployment in couple of ways.
1)	in azure release pipeline we have task named Kubectl wich can be used to create Kubernetes connection and in same task we will get option to connect to ACR using Service principle connection 
2)	in market place we have task named “Pull images from ACR” to get ACR Access.
3)	We can also create build to access ACR image

steps:
- task: DockerCompose@0
  displayName: 'Build services'
  inputs:
    azureSubscription: '(xxxx-xxxx-xxx-xxx)'
    azureContainerRegistry: '{"loginServer":"iotci.azurecr.io", "id" :   "/subscriptions/a476/resourceGroups/xxxaa/providers/Microsoft.ContainerRegistry/registries/XXXX"}'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Build services'
    additionalImageTags: '$(Build.BuildId)'
    includeLatestTag: true

6)	The image should be deployed as templates such as <image_name>:<build_id>

containers:
- name: azure-vote-front
  image: <acrName>.azurecr.io/azure-vote-front:$( Build.BuildId)
kubectl apply -f azure-vote-all-in-one-redis.yaml

